// Autogenerated AST node on 08/11/2020, 15:59:03
package org.jpp.astnodes.ast;
import org.antlr.runtime.Token;
import org.jpp.astnodes.PythonTree;
import org.jpp.astnodes.adapter.AstAdapters;
import org.jpp.astnodes.base.slice;
import org.jpp.heart.ArgParser;
import org.jpp.heart.AstList;
import org.jpp.heart.Py;
import org.jpp.heart.PyObject;
import org.jpp.heart.PyUnicode;
import org.jpp.heart.PyStringMap;
import org.jpp.heart.PyType;
import org.jpp.exposers.ExposedGet;
import org.jpp.exposers.ExposedMethod;
import org.jpp.exposers.ExposedNew;
import org.jpp.exposers.ExposedSet;
import org.jpp.exposers.ExposedType;

import java.util.ArrayList;

@ExposedType(name = "_ast.ExtSlice", base = slice.class)
public class ExtSlice extends slice {
public static final PyType TYPE = PyType.fromClass(ExtSlice.class);
    private java.util.List<slice> dims;
    public java.util.List<slice> getInternalDims() {
        return dims;
    }
    @ExposedGet(name = "dims")
    public PyObject getDims() {
        return new AstList(dims, AstAdapters.sliceAdapter);
    }
    @ExposedSet(name = "dims")
    public void setDims(PyObject dims) {
        this.dims = AstAdapters.py2sliceList(dims);
    }


    private final static PyUnicode[] fields =
    new PyUnicode[] {new PyUnicode("dims")};
    @ExposedGet(name = "_fields")
    public PyUnicode[] get_fields() { return fields; }

    private final static PyUnicode[] attributes = new PyUnicode[0];
    @ExposedGet(name = "_attributes")
    public PyUnicode[] get_attributes() { return attributes; }

    public ExtSlice(PyType subType) {
        super(subType);
    }
    public ExtSlice() {
        this(TYPE);
    }
    @ExposedNew
    @ExposedMethod
    public void ExtSlice___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("ExtSlice", args, keywords, new String[]
            {"dims"}, 1, true);
        setDims(ap.getPyObject(0, Py.None));
    }

    public ExtSlice(PyObject dims) {
        setDims(dims);
    }

    public ExtSlice(Token token, java.util.List<slice> dims) {
        super(token);
        this.dims = dims;
        if (dims == null) {
            this.dims = new ArrayList<slice>();
        }
        for(PythonTree t : this.dims) {
            addChild(t);
        }
    }

    public ExtSlice(Integer ttype, Token token, java.util.List<slice> dims) {
        super(ttype, token);
        this.dims = dims;
        if (dims == null) {
            this.dims = new ArrayList<slice>();
        }
        for(PythonTree t : this.dims) {
            addChild(t);
        }
    }

    public ExtSlice(PythonTree tree, java.util.List<slice> dims) {
        super(tree);
        this.dims = dims;
        if (dims == null) {
            this.dims = new ArrayList<slice>();
        }
        for(PythonTree t : this.dims) {
            addChild(t);
        }
    }

    @ExposedGet(name = "repr")
    public String toString() {
        return "ExtSlice";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("ExtSlice(");
        sb.append("dims=");
        sb.append(dumpThis(dims));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitExtSlice(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (dims != null) {
            for (PythonTree t : dims) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    public PyObject __dict__;

    @Override
    public PyObject fastGetDict() {
        ensureDict();
        return __dict__;
    }

    @ExposedGet(name = "__dict__")
    public PyObject getDict() {
        return fastGetDict();
    }

    private void ensureDict() {
        if (__dict__ == null) {
            __dict__ = new PyStringMap();
        }
    }

}
