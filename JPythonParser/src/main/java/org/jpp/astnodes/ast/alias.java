// Autogenerated AST node on 08/11/2020, 15:59:03
package org.jpp.astnodes.ast;
import org.antlr.runtime.Token;
import org.jpp.astnodes.AST;
import org.jpp.astnodes.PythonTree;
import org.jpp.astnodes.adapter.AstAdapters;
import org.jpp.heart.ArgParser;
import org.jpp.heart.Py;
import org.jpp.heart.PyObject;
import org.jpp.heart.PyUnicode;
import org.jpp.heart.PyStringMap;
import org.jpp.heart.PyType;
import org.jpp.exposers.ExposedGet;
import org.jpp.exposers.ExposedMethod;
import org.jpp.exposers.ExposedNew;
import org.jpp.exposers.ExposedSet;
import org.jpp.exposers.ExposedType;

@ExposedType(name = "_ast.alias", base = AST.class)
public class alias extends PythonTree {
    public static final PyType TYPE = PyType.fromClass(alias.class);
    private String name;
    public String getInternalName() {
        return name;
    }
    @ExposedGet(name = "name")
    public PyObject getName() {
        if (name == null) return Py.None;
        return new PyUnicode(name);
    }
    @ExposedSet(name = "name")
    public void setName(PyObject name) {
        this.name = AstAdapters.py2identifier(name);
    }

    private String asname;
    public String getInternalAsname() {
        return asname;
    }
    @ExposedGet(name = "asname")
    public PyObject getAsname() {
        if (asname == null) return Py.None;
        return new PyUnicode(asname);
    }
    @ExposedSet(name = "asname")
    public void setAsname(PyObject asname) {
        this.asname = AstAdapters.py2identifier(asname);
    }


    private final static PyUnicode[] fields =
    new PyUnicode[] {new PyUnicode("name"), new PyUnicode("asname")};
    @ExposedGet(name = "_fields")
    public PyUnicode[] get_fields() { return fields; }

    private final static PyUnicode[] attributes = new PyUnicode[0];
    @ExposedGet(name = "_attributes")
    public PyUnicode[] get_attributes() { return attributes; }

    public alias(PyType subType) {
        super(subType);
    }
    public alias() {
        this(TYPE);
    }
    @ExposedNew
    @ExposedMethod
    public void alias___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("alias", args, keywords, new String[]
            {"name", "asname"}, 2, true);
        setName(ap.getPyObject(0, Py.None));
        setAsname(ap.getPyObject(1, Py.None));
    }

    public alias(PyObject name, PyObject asname) {
        setName(name);
        setAsname(asname);
    }

    public alias(Token token, String name, String asname) {
        super(token);
        this.name = name;
        this.asname = asname;
    }

    public alias(Integer ttype, Token token, String name, String asname) {
        super(ttype, token);
        this.name = name;
        this.asname = asname;
    }

    public alias(PythonTree tree, String name, String asname) {
        super(tree);
        this.name = name;
        this.asname = asname;
    }

    @ExposedGet(name = "repr")
    public String toString() {
        return "alias";
    }

    public String toStringTree() {
        StringBuffer sb = new StringBuffer("alias(");
        sb.append("name=");
        sb.append(dumpThis(name));
        sb.append(",");
        sb.append("asname=");
        sb.append(dumpThis(asname));
        sb.append(",");
        sb.append(")");
        return sb.toString();
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        traverse(visitor);
        return null;
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
    }

    public PyObject __dict__;

    @Override
    public PyObject fastGetDict() {
        ensureDict();
        return __dict__;
    }

    @ExposedGet(name = "__dict__")
    public PyObject getDict() {
        return fastGetDict();
    }

    private void ensureDict() {
        if (__dict__ == null) {
            __dict__ = new PyStringMap();
        }
    }

    // Support for indexer below
    private java.util.List<Name> nameNodes;
    public java.util.List<Name> getInternalNameNodes() {
        return nameNodes;
    }
    private Name asnameNode;
    public Name getInternalAsnameNode() {
        return asnameNode;
    }
    // [import] name [as asname]
    public alias(Name name, Name asname) {
        this(java.util.Arrays.asList(new Name[]{name}), asname);
    }
    // [import] ...foo.bar.baz [as asname]
    public alias(java.util.List<Name> nameNodes, Name asname) {
        this.nameNodes = nameNodes;
        this.name = dottedNameListToString(nameNodes);
        if (asname != null) {
            this.asnameNode = asname;
            this.asname = asname.getInternalId();
        }
    }
    // End indexer support
}
